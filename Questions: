1.Why do we create branches in a repository and why do we create pull requests instead of merging directly?
Ans=>We create branches to isolate development work and avoid disrupting the main codebase. Pull requests facilitate code review, collaboration, and ensure quality control before merging changes.

2.What is the difference between git add . and git add <filename>? What will we use when we have changes in multiples but we are not required to add some files?
Ans=>git add . stages all changes in the current directory and its subdirectories.
     git add <filename> stages only the specified file, allowing selective staging of changes. Use this when you have changes in multiple files but do not want to add some files.

3.What is the difference between git fetch and git pull?
Ans=>git fetch retrieves updates from the remote repository without merging them into your local branch, allowing you to review changes first.
     git pull combines git fetch and git merge, automatically fetching updates and merging them into your current local branch.

4.What is a head in a repository and what does it do?
Ans=>HEAD is a reference to the current commit you are working on in a repository.
     It allows Git to track your position in the commit history and is used to determine the base for new commits.

5.What is the .git folder in a repository?
Ans=>The .git folder contains all the metadata, configuration, and object database necessary for managing the repository.
     It tracks the entire history of the project, including commits, branches, and tags, enabling version control and collaboration.

6.What are commit hashes and its use cases?
Ans=>Commit hashes are unique identifiers generated by Git for each commit, ensuring precise tracking and referencing of changes in the repository.
     They are used to revert, compare, or reference specific commits in various Git operations, enhancing traceability and collaboration.

7.Different ways of syncing a branch with origin.
Ans=>Pulling changes: Use git pull to fetch and merge changes from the remote branch to your local branch, keeping it updated.
     Fetching and merging: Use git fetch to get updates from the remote branch and then git merge origin/<branch-name> to manually merge them into your local branch.
